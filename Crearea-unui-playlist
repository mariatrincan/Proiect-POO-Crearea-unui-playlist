#include <iostream>
#include <vector>
#include <string>
#include <stdexcept>
#include <fstream>
#include <algorithm>
#include <memory>
#include <numeric>
using namespace std;

template <typename T, typename... Args>
std::unique_ptr<T> make_unique(Args&&... args) {
    return std::unique_ptr<T>(new T(std::forward<Args>(args)...)); //Am folosit pentru a aloca dinamic un obiect
    //si pentru a-i gestiona memoria
}

class Muzica { //reprezinta o melodie generica cu atributele principale
    string titlu;
    string gen;
    int durata; // in secunde
    string artist;

public:
    // Constructor implicit
    Muzica() : titlu("Necunoscut"),artist("Necunoscut"), gen("Necunoscut"), durata(0) {}

    // Constructor parametrizat
    Muzica(const string& t, const string& g, int d, const string& a) {
        if (t.empty()) throw runtime_error("Titlul nu poate fi gol!");
        if (a.empty()) throw runtime_error("Artistul nu poate fi gol!");
        if (d <= 0) throw runtime_error("Durata trebuie sa fie pozitiva!");


        titlu = t;
        gen = g;
        durata = d;
        artist = a;
    } //initializeaza atributele cu valori date si verifica validitatea lor

    // Constructor de copiere
    Muzica(const Muzica& other)
        : titlu(other.titlu), gen(other.gen), durata(other.durata), artist(other.artist) {}
   //creeaza o copie a unui obiect muzica

    // Operator = de atribuire
    Muzica& operator=(const Muzica& other) {
        if (this != &other) {
            titlu = other.titlu;
            gen = other.gen;
            durata = other.durata;
            artist = other.artist;
        } //copiaza valorile din alt obiect muzica
        return *this;
    } //nu se creeaza un nou obiect

    // Destructor
    virtual ~Muzica() = default; //permite distrugerea corecta daca e mostenita

    // Operator >> pentru citire
    friend istream& operator>>(istream& in, Muzica& m) {
        cout << "Introduceti titlul: ";
        getline(in, m.titlu);
        if (m.titlu.empty()) throw runtime_error("Titlul nu poate fi gol!");

        cout << "Introduceti artistul: ";
        getline(in, m.artist);
        if (m.artist.empty()) throw runtime_error("Artistul nu poate fi gol!");

        cout << "Introduceti genul: ";
        getline(in, m.gen);

        cout << "Introduceti durata (in secunde): ";
        in >> m.durata;
        if (m.durata <= 0) throw runtime_error("Durata trebuie sa fie pozitiva!");
        in.ignore();

        return in;
    }

    // Operator << pentru afișare
    friend ostream& operator<<(ostream& out, const Muzica& m) {
        out << "Titlu: " << m.titlu << ", Gen: " << m.gen << ", Durata: " << m.durata / 60 << " min " << m.durata % 60 << " sec, Artist: " << m.artist;
        return out;
    }

    // Operator == pentru comparare
    bool operator==(const Muzica& other) const {
        return titlu == other.titlu && gen == other.gen && durata == other.durata && artist == other.artist;
    }

    // functii pentru a accesa valorile atributelor private ale clasei din afara acesteia
    //fara a le modifica
    string getTitlu() const { return titlu; }
    string getGen() const { return gen; }
    string getArtist() const { return artist; }
    int getDurata() const { return durata; }
};
//clase derivate din clasa de baza muzica, ce reprezinta fiecare cate un gen anume
class MuzicaMetal : public Muzica {
    string subgen;

public:

    MuzicaMetal() : Muzica(), subgen("Necunoscut") {}
    //Constructor parametrizat ce apeleaza constructorul parametrizat al clasei de baza Muzica
    MuzicaMetal(const string& t, const string& a, int d, const string& sg)
        : Muzica(t, "Metal", d, a), subgen(sg) {}

    // Constructor de copiere ce copiaza valorile dintr-un alt obiect MuzicaMetal folosind

    //constructorul de copiere al clasei Muzica
    MuzicaMetal(const MuzicaMetal& other)
        : Muzica(other), subgen(other.subgen) {}

    // Operator = de atribuire
    MuzicaMetal& operator=(const MuzicaMetal& other) {
        if (this != &other) {
            Muzica::operator=(other); // Apelăm operator= din baza
            subgen = other.subgen;
        }
        return *this;
    }

    // Destructor
    ~MuzicaMetal() override = default; //stergerea corecta in caz de polimorfism

    // Funcție de afișare
    void Afiseaza() const {
        cout << "[Metal] Titlu: " << getTitlu() << ", Gen: " << getGen()
             << ", Durata: " << getDurata() / 60 << " min " << getDurata() % 60
             << " sec, Artist: " << getArtist() << ", Subgen: " << subgen << endl;
    }
};

class MuzicaRock : public Muzica {
    bool areSolo;

public:
    // Constructor implicit și parametrizat
    MuzicaRock() : Muzica(), areSolo(false) {}

    MuzicaRock(const string& t, const string& a, int d, bool solo)
        : Muzica(t, "Rock", d, a), areSolo(solo) {}

    // Constructor de copiere
    MuzicaRock(const MuzicaRock& other)
        : Muzica(other), areSolo(other.areSolo) {}

    // Operator = de atribuire
    MuzicaRock& operator=(const MuzicaRock& other) {
        if (this != &other) {
            Muzica::operator=(other); // Apelăm operator= din baza
            areSolo = other.areSolo;
        }
        return *this;
    }

    // Destructor
    ~MuzicaRock() override = default;

    // Funcție de afișare
    void Afiseaza() const {
        cout << "[Rock] Titlu: " << getTitlu() << ", Gen: " << getGen()
             << ", Durata: " << getDurata() / 60 << " min " << getDurata() % 60
             << " sec, Artist: " << getArtist() << ", Are solo: "
             << (areSolo ? "Da" : "Nu") << endl;
    }
};

class MuzicaPop : public Muzica {
    int nivelPopularitate;

public:
    // Constructor implicit și parametrizat
    MuzicaPop() : Muzica(), nivelPopularitate(0) {}

    MuzicaPop(const string& t, const string& a, int d, int popularitate)
        : Muzica(t, "Pop", d, a), nivelPopularitate(popularitate) {}

    // Constructor de copiere
    MuzicaPop(const MuzicaPop& other)
        : Muzica(other), nivelPopularitate(other.nivelPopularitate) {}

    // Operator = de atribuire
    MuzicaPop& operator=(const MuzicaPop& other) {
        if (this != &other) {
            Muzica::operator=(other); // Apelăm operator= din baza
            nivelPopularitate = other.nivelPopularitate;
        }
        return *this;
    }

    // Destructor
    ~MuzicaPop() override = default;

    // Funcție de afișare
    void Afiseaza() const {
        cout << "[Pop] Titlu: " << getTitlu() << ", Gen: " << getGen()
             << ", Durata: " << getDurata() / 60 << " min " << getDurata() % 60
             << " sec, Artist: " << getArtist() << ", Popularitate: "
             << nivelPopularitate << "/10" << endl;
    }
};

class Playlist {
    vector<Muzica> melodii; //stocheaza obiecte de tip Muzica, reprezinta lista de melodii din playlist
    string nume; // numele playlistului

public:
    // Constructor implicit
    Playlist() : nume("Playlist Fără Nume") {}

    // Constructor parametrizat
    explicit Playlist(const string& numePlaylist) : nume(numePlaylist) {}

    // Constructor de copiere
    Playlist(const Playlist& other) //creeaza o copie a unui alt playlist
        : melodii(other.melodii), nume(other.nume) {}
     //copiaza lista de melodii si numele playlistului
    // Operator = de atribuire
    Playlist& operator=(const Playlist& other) {
        if (this != &other) { //se verifica autoatribuirea
            melodii = other.melodii;
            nume = other.nume;
        }
        return *this;
    }

    // Destructor
    ~Playlist() = default;

    // Metodă pentru a obține numele playlistului
    string getNume() const {
        return nume;
    }

    // Metodă pentru a seta un nou nume pentru playlist
    void setNume(const string& nouNume) {//referinta const pt a evita copierea inutila
        if (nouNume.empty()) {
            throw runtime_error("Numele nu poate fi gol!");
        }
        nume = nouNume;
    }
    void AddSong(const Muzica& m) {
        melodii.push_back(m);
        cout << "Melodia a fost adaugata cu succes.\n";
    }

    bool DeleteSong(const Muzica& m) {
        for (auto it = melodii.begin(); it != melodii.end(); ++it) {
            if (*it == m) {
                melodii.erase(it);
                cout << "Melodia a fost stearsa cu succes.\n";
                return true;
            }
        }
        throw runtime_error("Melodia nu a fost gasita in playlist!");
    }

    void ShowAll() const {
        if (melodii.empty()) {
            cout << "Playlist-ul este gol.\n";
            return;
        }

        cout << "Melodii in playlist:\n";
        for (const auto& m : melodii) {
            cout << m << endl;
        }
    }

    void SaveToFile(const string& filename) const {
        ofstream outFile(filename);
        if (!outFile) {
            throw runtime_error("Eroare la deschiderea fisierului pentru scriere!");
        }

        for (const auto& m : melodii) {
            outFile << m.getTitlu() << '\n' << m.getGen() << '\n' << m.getDurata() << '\n' << m.getArtist() << '\n';
        }

        cout << "Playlist-ul a fost salvat in fisierul " << filename << ".\n";
    }

    void LoadFromFile(const string& filename) {
        ifstream inFile(filename);
        if (!inFile) {
            throw runtime_error("Eroare la deschiderea fisierului pentru citire!");
        }

        melodii.clear();
        string titlu, gen, artist;
        int durata;

        while (getline(inFile, titlu) && getline(inFile, gen) && (inFile >> durata) && inFile.ignore() && getline(inFile, artist)) {
            melodii.emplace_back(titlu, gen, durata, artist);
        }

        cout << "Playlist-ul a fost incarcat din fisierul " << filename << ".\n"; //incarca datele despre fiecare melodie si le adauga in vectorul melodii
    }

    void SortSongs() { //std::sort cu functii lambda
        if (melodii.empty()) {
            cout << "Playlist-ul este gol. Nu exista nimic de sortat.\n";
            return;
        }

        int optiune;
        cout << "Cum doriti sa sortati melodiile?\n";
        cout << "1. Dupa titlu\n";
        cout << "2. Dupa artist\n";
        cout << "Alege o optiune: ";
        cin >> optiune;
        cin.ignore();

        if (optiune == 1) {
            sort(melodii.begin(), melodii.end(), [](const Muzica& a, const Muzica& b) {
                return a.getTitlu() < b.getTitlu();
            });
            cout << "Melodiile au fost sortate dupa titlu.\n";
        } else if (optiune == 2) {
            sort(melodii.begin(), melodii.end(), [](const Muzica& a, const Muzica& b) {
                return a.getArtist() < b.getArtist();
            });
            cout << "Melodiile au fost sortate dupa artist.\n";
        } else {
            cout << "Optiune invalida.\n";
        }
    }
    const vector<Muzica>& getMelodii() const {
        return melodii;
    }
};


class PlaylistManager { //singleton
private:
    static unique_ptr<PlaylistManager> instance; //instanta unica a clasei
    vector<Playlist> playlists; //stl ce stocheaza obiecte de tip playlist

    PlaylistManager() {} // Constructor privat ce impiedica crearea de instante ale clasei din afara acestuia

public:
    static PlaylistManager& GetInstance() {
        if (!instance) {
            instance = std::unique_ptr<PlaylistManager>(new PlaylistManager());
        }
        return *instance; //referinta la instanta pentru a evita copierea
    } //returneaza instanta unica a clasei

    void AddPlaylist(const Playlist& playlist) {
        playlists.push_back(playlist);
        cout << "Playlist \"" << playlist.getNume() << "\" adaugat cu succes.\n";
    } //adaugare de playlist

    void RenamePlaylist(size_t index, const string& nouNume) {
        if (index >= playlists.size()) {
            throw runtime_error("Index invalid pentru playlist!");
        }
        playlists[index].setNume(nouNume);
        cout << "Playlist redenumit cu succes în \"" << nouNume << "\".\n";
    }


    void ShowAllPlaylists() const {
    if (playlists.empty()) {
        cout << "Nu exista playlisturi.\n";
        return;
    }

    cout << "\n****** Toate Playlisturile ******\n";
    for (size_t i = 0; i < playlists.size(); ++i) {
        cout << "Playlist " << i + 1 << ": " << playlists[i].getNume() << "\n";
        playlists[i].ShowAll();
        cout << "--------------------\n";
    }
}


    size_t GetPlaylistsCount() const {
        return playlists.size();
    } //returneaza numarul de playlisturi

    Playlist& GetPlaylist(size_t index) {
        if (index >= playlists.size()) {
            throw runtime_error("Index invalid pentru playlist!");
        }
        return playlists[index];
    }

    const Playlist& GetPlaylist(size_t index) const {
        if (index >= playlists.size()) {
            throw runtime_error("Index invalid pentru playlist!");
        }
        return playlists[index];
    }

//obtinerea unui playlist dupa index

};
template <typename T>
class StatisticiPlaylist { //o clasa template, poate lucra cu tipuri de date generice
    std::vector<T> valori;

public:

    void AdaugaValoare(const T& valoare) {
        valori.push_back(valoare);
    }

    // Calcularea sumei valorilor
    T Suma() const {
        if (valori.empty()) {
            throw std::runtime_error("Nu există valori pentru calcul.");
        }
        return std::accumulate(valori.begin(), valori.end(), T(0));
    }

    // Calcularea mediei valorilor
    T Medie() const {
        if (valori.empty()) {
            throw std::runtime_error("Nu există valori pentru calcul.");
        }
        return Suma() / static_cast<T>(valori.size());
    }

    // Găsirea valorii maxime
    T Max() const {
        if (valori.empty()) {
            throw std::runtime_error("Nu există valori pentru calcul.");
        }
        return *std::max_element(valori.begin(), valori.end());
    }

    // Găsirea valorii minime
    T Min() const {
        if (valori.empty()) {
            throw std::runtime_error("Nu există valori pentru calcul.");
        }
        return *std::min_element(valori.begin(), valori.end());
    }


    void AfiseazaValori() const {
        if (valori.empty()) {
            std::cout << "Nu există valori de afișat.\n";
            return;
        }
        std::cout << "Valori în statistici: ";
        for (const auto& v : valori) {
            std::cout << v << " ";
        }
        std::cout << "\n";
    }
};

int SelectPlaylist(PlaylistManager& manager) { //selectarea unui playlist
    manager.ShowAllPlaylists();
    cout << "Selectati numarul playlistului: ";
    int index;
    cin >> index;
    cin.ignore();
    if (index <= 0 || index > manager.GetPlaylistsCount()) {
        throw runtime_error("Numar de playlist invalid!");
    }
    return index - 1;
}

void ManagePlaylist(Playlist& playlist) {
    while (true) {
        cout << "\n********** Gestionare Playlist **********\n";
        cout << "1. Adauga melodie generica\n";
        cout << "2. Adauga melodie Metal\n";
        cout << "3. Adauga melodie Rock\n";
        cout << "4. Adauga melodie Pop\n";
        cout << "5. Sterge melodie\n";
        cout << "6. Afiseaza toate melodiile\n";
        cout << "7. Sorteaza melodiile\n";
        cout << "8. Salveaza playlist-ul in fisier\n";
        cout << "9. Incarca playlist-ul din fisier\n";
        cout << "10. Calculeaza statistici despre durata melodiilor\n";
        cout << "11. Revenire la meniul principal\n";
        cout << "Alege o optiune: ";
        int optiune;
        cin >> optiune;
        cin.ignore(); //elimina orice caracter ramas in buffer pentru a preveni problemele la urmatoarea citire de text

        try {
            switch (optiune) {
                case 1: {
                    Muzica m;
                    cin >> m;
                    playlist.AddSong(m);
                    break;
                }
                case 2: {
                    string titlu, artist, subgen;
                    int durata;

                    cout << "Introduceti titlul: ";
                    getline(cin, titlu);
                    cout << "Introduceti artistul: ";
                    getline(cin, artist);
                    cout << "Introduceti durata (in secunde): ";
                    cin >> durata;
                    cin.ignore();
                    cout << "Introduceti subgenul: ";
                    getline(cin, subgen);

                    MuzicaMetal m(titlu, artist, durata, subgen);
                    playlist.AddSong(m);
                    break;
                }
                case 3: {
                    string titlu, artist;
                    int durata;
                    bool areSolo;

                    cout << "Introduceti titlul: ";
                    getline(cin, titlu);
                    cout << "Introduceti artistul: ";
                    getline(cin, artist);
                    cout << "Introduceti durata (in secunde): ";
                    cin >> durata;
                    cin.ignore();
                    cout << "Are solo de chitara? (1 = Da, 0 = Nu): ";
                    cin >> areSolo;
                    cin.ignore();

                    MuzicaRock m(titlu, artist, durata, areSolo);
                    playlist.AddSong(m);
                    break;
                }
                case 4: {
                    string titlu, artist;
                    int durata, popularitate;

                    cout << "Introduceti titlul: ";
                    getline(cin, titlu);
                    cout << "Introduceti artistul: ";
                    getline(cin, artist);
                    cout << "Introduceti durata (in secunde): ";
                    cin >> durata;
                    cin.ignore();
                    cout << "Introduceti nivelul de popularitate (1-10): ";
                    cin >> popularitate;
                    cin.ignore();

                    MuzicaPop m(titlu, artist, durata, popularitate);
                    playlist.AddSong(m);
                    break;
                }
                case 5: {
                    Muzica m;
                    cin >> m;
                    playlist.DeleteSong(m);
                    break;
                }
                case 6:
                    playlist.ShowAll();
                    break;
                case 7:
                    playlist.SortSongs();
                    break;
                case 8: {
                    string filename;
                    cout << "Introduceti numele fisierului pentru salvare: ";
                    cin >> filename;
                    playlist.SaveToFile(filename);
                    break;
                }
                case 9: {
                    string filename;
                    cout << "Introduceti numele fisierului pentru incarcare: ";
                    cin >> filename;
                    playlist.LoadFromFile(filename);
                    break;
                }
                case 10: {
                    StatisticiPlaylist<int> statistici;
                    for (const auto& melodie : playlist.getMelodii()) {
                        statistici.AdaugaValoare(melodie.getDurata());
                    }

                    cout << "Statistici despre duratele melodiilor:\n";
                    cout << "Suma: " << statistici.Suma() << " secunde\n";
                    cout << "Media: " << statistici.Medie() << " secunde\n";
                    cout << "Maxim: " << statistici.Max() << " secunde\n";
                    cout << "Minim: " << statistici.Min() << " secunde\n";
                    break;
                }
                case 11:
                    return;
                default:
                    cout << "Optiune invalida. Incearca din nou.\n";
                    break;
            }
        } catch (const runtime_error& e) {
            cout << "Eroare: " << e.what() << endl;
        }
    }
}


// Funcția CreatePlaylist
unique_ptr<PlaylistManager> PlaylistManager::instance = nullptr; //initializeaza instanta statica

Playlist CreatePlaylist() {
    Playlist playlist;
    int optiune;

    while (true) {
        cout << "\nAdaugati melodii in playlist:\n";
        cout << "1. Adauga melodie generica\n";
        cout << "2. Adauga melodie Metal\n";
        cout << "3. Adauga melodie Rock\n";
        cout << "4. Adauga melodie Pop\n";
        cout << "5. Terminati de adaugat\n";
        cout << "Alege o optiune: ";
        cin >> optiune;
        cin.ignore();

        if (optiune == 1) {
            Muzica m;
            try {
                cin >> m;
                playlist.AddSong(m);
            } catch (const runtime_error& e) {
                cout << "Eroare: " << e.what() << endl;
            }
        } else if (optiune == 2) {
            string titlu, artist, subgen;
            int durata;

            cout << "Introduceti titlul: ";
            getline(cin, titlu);
            cout << "Introduceti artistul: ";
            getline(cin, artist);
            cout << "Introduceti durata (in secunde): ";
            cin >> durata;
            cin.ignore();
            cout << "Introduceti subgenul: ";
            getline(cin, subgen);

            try {
                MuzicaMetal m(titlu, artist, durata, subgen);
                playlist.AddSong(m);
            } catch (const runtime_error& e) {
                cout << "Eroare: " << e.what() << endl;
            }
        } else if (optiune == 3) {
            string titlu, artist;
            int durata;
            bool areSolo;

            cout << "Introduceti titlul: ";
            getline(cin, titlu);
            cout << "Introduceti artistul: ";
            getline(cin, artist);
            cout << "Introduceti durata (in secunde): ";
            cin >> durata;
            cin.ignore();
            cout << "Are solo de chitara? (1 = Da, 0 = Nu): ";
            cin >> areSolo;
            cin.ignore();

            try {
                MuzicaRock m(titlu, artist, durata, areSolo);
                playlist.AddSong(m);
            } catch (const runtime_error& e) {
                cout << "Eroare: " << e.what() << endl;
            }
        } else if (optiune == 4) {
            string titlu, artist;
            int durata, popularitate;

            cout << "Introduceti titlul: ";
            getline(cin, titlu);
            cout << "Introduceti artistul: ";
            getline(cin, artist);
            cout << "Introduceti durata (in secunde): ";
            cin >> durata;
            cin.ignore();
            cout << "Introduceti nivelul de popularitate (1-10): ";
            cin >> popularitate;
            cin.ignore();

            try {
                MuzicaPop m(titlu, artist, durata, popularitate);
                playlist.AddSong(m);
            } catch (const runtime_error& e) {
                cout << "Eroare: " << e.what() << endl;
            }
        } else if (optiune == 5) {
            break;
        } else {
            cout << "Optiune invalida. Incearca din nou.\n";
        }
    }

    return playlist;
}


int main() {
    PlaylistManager& manager = PlaylistManager::GetInstance(); //creaza o referinta la instanta unica, se asigura ca exista o sg instanta

    while (true) {
        cout << "\n********** Manager Playlist **********\n";
        cout << "1. Adauga un playlist\n";
        cout << "2. Afiseaza toate playlisturile\n";
        cout << "3. Gestionati un playlist\n";
        cout << "4. Redenumeste un playlist\n";
        cout << "5. Iesire\n";
        cout << "Alege o optiune: ";
        int optiune;
        cin >> optiune;
        cin.ignore();

        try {
            switch (optiune) {
                case 1: {
                    string nume;
                    cout << "Introduceti numele noului playlist: ";
                    getline(cin, nume);
                    Playlist p(nume);
                    manager.AddPlaylist(p);
                    break;
                }
                case 2:
                    manager.ShowAllPlaylists();
                    break;
                case 3: {
                    int index = SelectPlaylist(manager);
                    ManagePlaylist(manager.GetPlaylist(index));
                    break;
                }
                case 4: {
                    int index = SelectPlaylist(manager);
                    cout << "Introduceti noul nume pentru playlist: ";
                    string nouNume;
                    getline(cin, nouNume);
                    manager.RenamePlaylist(index, nouNume);
                    break;
                }
                case 5:
                    cout << "Iesire din aplicatie...\n";
                    return 0;
                default:
                    cout << "Optiune invalida. Incearca din nou.\n";
                    break;
            }
        } catch (const runtime_error& e) {
            cout << "Eroare: " << e.what() << endl;
        }
    }

    try {
        StatisticiPlaylist<int> statisticiDurate;

  // Afișăm valorile
        statisticiDurate.AfiseazaValori();

        // Calculăm statistici
        std::cout << "Suma duratelor: " << statisticiDurate.Suma() << " secunde\n";
        std::cout << "Durata medie: " << statisticiDurate.Medie() << " secunde\n";
        std::cout << "Durata maxima: " << statisticiDurate.Max() << " secunde\n";
        std::cout << "Durata minima: " << statisticiDurate.Min() << " secunde\n";
    } catch (const std::runtime_error& e) {
        std::cerr << "Eroare: " << e.what() << "\n";
    }

    return 0;
}



// TIP See CLion help at <a
// href="https://www.jetbrains.com/help/clion/">jetbrains.com/help/clion/</a>.
//  Also, you can try interactive lessons for CLion by selecting
//  'Help | Learn IDE Features' from the main menu.
